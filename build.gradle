plugins {
    id "idea"
    id "org.jetbrains.kotlin.jvm" version "1.7.10"
    id "org.jetbrains.kotlin.plugin.jpa" version "1.7.10"
    id "org.jetbrains.kotlin.plugin.spring" version "1.7.10"
    id "org.springframework.boot" version "2.7.4"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id "net.researchgate.release" version "3.0.2"
}

ext {
    openApiVersion = "1.6.12-SNAPSHOT"
    postgresContainerVersion = "1.16.0"
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

repositories {
    mavenCentral()
}

[compileKotlin, compileTestKotlin]*.kotlinOptions*.jvmTarget = "11"

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-actuator"

    implementation "org.postgresql:postgresql"

    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "org.springdoc:springdoc-openapi-ui:$openApiVersion"
    implementation "org.springdoc:springdoc-openapi-kotlin:$openApiVersion"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"

    testImplementation "org.apache.commons:commons-lang3"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.testcontainers:postgresql:$postgresContainerVersion"
}

test {
    useJUnitPlatform()
}

springBoot {
    buildInfo()
}

bootJar {
    archiveFileName = "${project.name}.jar"
}

release {
    var releaseVersion = project.property("release.releaseVersion")
    pushReleaseVersionBranch = "release/${releaseVersion}"
    git {
        requireBranch.set("develop")
    }
}

checkoutMergeToReleaseBranch {
    doFirst {
        var releaseVersion = project.property("release.releaseVersion")
        project.exec {
            executable = "git"
            args "checkout", "-B", "release/${releaseVersion}"
        }
    }
}